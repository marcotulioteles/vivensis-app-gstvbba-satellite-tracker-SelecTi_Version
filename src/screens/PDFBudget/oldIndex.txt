import React, { useEffect, useState } from 'react'

import { useTheme } from 'styled-components'
import * as FileSystem from 'expo-file-system'
import * as Sharing from 'expo-sharing'

import AsyncStorage from '@react-native-async-storage/async-storage'
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
import { ActivityIndicator, Dimensions, View } from 'react-native'
import { Container } from './styles'
import RNHTMLtoPDF from 'react-native-html-to-pdf'
import Pdf from 'react-native-pdf'

import { HeaderSecondary } from '~/components/HeaderSecondary'
import { BASE_64_BG } from './image/img64'
import { RouteProp, useRoute } from '@react-navigation/native'
import { RootBottomTabParamList } from '~/routes'
import { format } from 'date-fns'

type PDFBudgetScreenRouteProp = RouteProp<RootBottomTabParamList, 'PDFBudget'>

export const PDFBudget = () => {
  const theme = useTheme()

  const [techName, setTechName] = useState('')

  const route = useRoute<PDFBudgetScreenRouteProp>()

  const [uriPdf, setUriPdf] = useState('')
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (techName) loadPDF()
  }, [techName])

  useEffect(() => {
    async function loadTechName() {
      const response = await AsyncStorage.getItem('@techName')
      if (response) {
        setTechName(response)
      }
    }
    loadTechName()
  }, [])

  const sharePDF = async (fileUri: string) => {
    if (!(await Sharing.isAvailableAsync())) {
      alert(`Uh oh, sharing isn't available on your platform`)
      return
    }
    await Sharing.shareAsync(fileUri)
  }

  // <div  class="imgBg">
  //         <img src="http://vxapp.vivensis2.com.br/files/pg_orc01.jpg" />
  //       </div>
  const loadPDF = async () => {
    setLoading(true)
    try {
      const fileName = `budget-${new Date().getTime()}`
      let options = {
        html: `<html lang="pt">
        <head>
        <meta charset="UTF-8"><link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
        <title>Orçamento Detalhado</title>
        <style>
          body {
            font-family: 'Poppins', Inter, Arial, sans-serif;
            background: #f8f8f8;
            color: #333;
            width: 100%;
          }
          .imgBg {
            width: 100%;
            min-width:  100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #07133d !important;
            height: 1024px;
          }
          .imgBg img {
            height: 1024px;
            background-color: #07133d;
          }
          .container {
            width: 100%;
            min-width:  100%;
            background: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            height: 100%;
            position: relative;
          }
          .image {
            width: 100%;
            min-width:  100%;
            background: #fff;
            height: 98%;
            position: absolute;
            z-index: 1;
          }
          .content {
            padding: 40px;
            width: 90%;
            background: #fff;
            z-index: 20;
          }
          .header {
            display: flex;
            flex-direction: column;
            width: 100%;
            justify-content: flex-start;
            align-items: flex-start;
          }
          .header div {
            margin-bottom: 5px;
          }
          .header-label {
            width: 100px;
            color: #707173;
            font-size: 15px;
          }
          .header-value {
            display: inline-block;
            font-size: 16px;
            margin-top: 24px;
          }
          table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
          }
          th {
            color: #333;
            font-weight: normal;
            padding: 10px 0;
            border-bottom: 2px solid #F3F4F6;
            text-align: left;
          }
          td {
            padding: 10px 0;
            border-bottom: 1px solid #F3F4F6;
            text-align: left;
            color: #666;
          }
          .valor {
            text-align: right;
          }
          .total-row {
            background-color: #eeeeee;
            font-weight: bold;
            color: #333;
          }
          .total-row td {
            border-bottom: none;
          }
          .footer {
            text-align: right;
            font-weight: bold;
            padding-top: 10px;
          }
          .column-top {
            display: flex;
            flex-direction: column;
            margin-right: 100px;
          }
          .line {
            display: flex;
            flex-direction: row;
            align-items: center;
            background-color: #f8f8f9;
            padding: 20px;
            padding-left: 40px;
            width: 100%;
          }
          .header img {
            align-self: center;
          }
          .total {
            padding: 10px;
            
            text-align: left;
            color: #666;
          }
        </style>
        </head>
        <body>
        
        <div class="container">
          <img src="http://vxapp.vivensis2.com.br/files/02.jpg" class="image"/>
          <div class="header">
            <img src="${BASE_64_BG}" width="113" height="63" />
            <h2 style="text-align: center; width: 100%; color: 
            #0A234C; margin-bottom: 32px; font-size: 18px;">Orçamento Detalhado</h2>
            <div style="display: flex; flex-direction: column; background-color: #f8f8f9; 
              width: 100%;  padding-bottom: 8px; padding-top: 8px;">
              <div style="display: flex; flex-direction: column; background-color: #f8f8f9;
                border: 1px solid #ECEDEF; width: 100%;">
                <div class="line">
                  <div class="column-top">
                    <span class="header-label">CLIENTE</span>
                    <span class="header-value">${route.params.budget.name}</span>
                  </div>
                  ${
                    techName &&
                    `<div class="column-top">
                      <span class="header-label">TÉCNICO</span>
                      <span class="header-value">${techName}</span>
                    </div>`
                  }
                  <div class="column-top">
                    <span class="header-label">DATA</span>
                    <span class="header-value">${format(
                      new Date(Number(route.params.budget.id)),
                      'dd/MM/yyyy'
                    )}</span>
                  </div>
                </div>
              </div>
            </div>
            
          </div>
          <div class="content">
          <h3 style="font-weigth: 600; color: #313233; font-size: 14px;">
            Descrição
          </h3>
          <table>
            <tr>
              <th style="color: #707173; font-size: 10px;">EQUIPAMENTO</th>
              <th style="color: #707173; font-size: 10px;">QTD</th>
              <th style="color: #707173; font-size: 10px;" class="valor">VALOR UNITÁRIO</th>
              <th style="color: #707173; font-size: 10px;" class="valor">VALOR TOTAL</th>
            </tr>
            ${route.params.budget.products
              .map(
                (item) =>
                  `<tr>
                <td style="font-size: 12px; color: #000;">${item.name}</td>
                <td style="font-size: 12px; color: #000;">${item.quantity}</td>
                <td class="valor" style="font-size: 12px; color: #000;">${Number(
                  item.price
                ).toLocaleString('pt-BR', {
                  style: 'currency',
                  currency: 'BRL',
                })}</td>
                <td class="valor" style="font-size: 12px; color: #000;">${(
                  Number(item.price) * Number(item.quantity)
                ).toLocaleString('pt-BR', {
                  style: 'currency',
                  currency: 'BRL',
                })}</td>
              </tr>`
              )
              .join('')}
          </table>
          <div style="padding: 10px 0 30px 0; border-bottom: 1px solid #F3F4F6;  display: flex; flex-direction: row; align-items: center; justify-content: space-between;">
            <span style="font-size: 12px; font-weigth: 500">Valor total</span>
            <span style="color: #2A7287; font-size: 12px;">${route.params.budget?.products
              .reduce((acc, item) => {
                acc += Number(item.price) * Number(item.quantity)
                return acc
              }, 0)
              .toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL',
              })}</span>
          </div>
          </div>
        </div>
        </body>
        </html>`,
        fileName,
        directory: 'Documents',
        base64: true,
      }

      let file = await RNHTMLtoPDF.convert(options)
      setUriPdf(file.filePath as string)

      const fileUri = FileSystem.documentDirectory + `${fileName}.pdf`
      await FileSystem.writeAsStringAsync(fileUri, file.base64 as string, {
        encoding: FileSystem.EncodingType.Base64,
      })
      sharePDF(fileUri)
      // setValue('caid', '')
      // setValue('scua', '')
      setLoading(false)
    } catch (er: any) {
      console.log(er)

      setLoading(false)
    }
  }

  return loading ? (
    <View style={{ flex: 1, backgroundColor: theme.COLORS.WHITE }}>
      <HeaderSecondary title='Orçamento' />
      <Container>
        <ActivityIndicator size='large' color={theme.COLORS.PRIMARY_400} />
      </Container>
    </View>
  ) : (
    <KeyboardAwareScrollView
      style={{ flex: 1, backgroundColor: theme.COLORS.WHITE }}
      contentContainerStyle={{ flex: 1 }}
    >
      <HeaderSecondary title='Orçamento' />
      <View
        style={{
          flex: 1,
          justifyContent: 'flex-start',
          alignItems: 'center',
          marginTop: 25,
        }}
      >
        <Pdf
          source={{ uri: uriPdf }}
          onLoadComplete={(numberOfPages, filePath) => {
            console.log(`Number of pages: ${numberOfPages}`)
          }}
          onPageChanged={(page, numberOfPages) => {
            console.log(`Current page: ${page}`)
          }}
          enablePaging={false}
          onError={(error) => {
            console.log(error)
          }}
          onPressLink={(uri) => {
            console.log(`Link pressed: ${uri}`)
          }}
          style={{
            flex: 1,
            width: Dimensions.get('window').width,
            height: Dimensions.get('window').height - 80,
          }}
        />
      </View>
    </KeyboardAwareScrollView>
  )
}
